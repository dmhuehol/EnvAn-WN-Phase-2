function [LCL] = rhumplot(snum,sounding,trz)
%%rhumplot
    %Function to generate figure with charts of relative humidity vs pressure
    %and relative humidity vs height, given a sounding number and a sounding
    %data structure. Note that this functionality is also present alongside T
    %and skew-T plotting in the soundplots function.
    %
    %General form: [LCL] = rhumplot(snum,sounding)
    %Outputs:
    %LCL - estimated level of cloud base
    %
    %Inputs:
    %snum: a sounding number (sounding number for a specific date can be found
    %   using findsnd or soundplots)
    %sounding: a soundings data structure
    %trz: logical to show a figure with subplots for Tvz and RHvz
    %
    %Version Date: 9/1/17
    %Last major revision: 6/2/17
    %Written by: Daniel Hueholt
    %North Carolina State University
    %Undergraduate Researcher at Environment Analytics
    %
    %See also: soundplots, findsnd, IGRAimpf
    %

if ~exist('trz','var')
    trz = 1; %Assume trz on
end

% Define freezing line
freezingx = [0 1200];
freezingy = ones(1,length(freezingx)).*0; %If a different line is desired, change the .*0 to .*new value
freezingxg = [0 16];
freezingyg = ones(1,length(freezingxg)).*0;

[r,~] = size(sounding); %Find the number of soundings
if r==1 %If it's oriented the other way
    [~,r] = size(sounding); %Find it this way instead
end

check = fieldnames(sounding); %Find fieldnames; this is used to check if dewpoint and relative humidity need to be added

if isempty(nonzeros(ismember(check,'rhum'))) == 1 %Check if the sounding has a relative humidity field, named rhum if generated by dewrelh
    for a = 1:r
        [sounding(a).dewpoint,sounding(a).relative_humidity] = dewrelh(sounding(a).temp,sounding(a).dew_point_dep); %Call to dewrelh to add dewpoint and relative humidity
    end
end

mb200 = find(sounding(snum).pressure >= 20000); %Find indices of readings where the pressure is greater than 20000 Pa
presheight = sounding(snum).pressure(mb200); %Select readings greater than 20000 Pa
presheightvector = presheight/100; %Convert Pa to hPa (mb)

%first geopotential height entry should be straight from the data
if isnan(sounding(snum).geopotential(1))==0
    geoheightvector(1) = sounding(snum).geopotential(1)/1000;
    %disp('1 is good')
elseif isnan(sounding(snum).geopotential(1))==1 && isnan(sounding(snum).geopotential(2))==0
    geoheightvector(1) = sounding(snum).geopotential(2)/1000;
    %disp('2 is good')
    %disp(snum)
elseif isnan(sounding(snum).geopotential(1))==1 && isnan(sounding(snum).geopotential(2))==1 && isnan(sounding(snum).geopotential(3))==0
    geoheightvector(1) = sounding(snum).geopotential(3)/1000;
    %disp('all the way to 3')
    %disp(snum)
else
    %disp('This data is really bad! Wow!')
    %disp(snum)
end

geoheightvector = geoheightvector'; %Transpose to match shape of others, important for polyxpoly

% Define rhum and temp as humidities and temp from surface to 200mb
% (temp is not plotted, but still needed to calculate geopotential height)
rhum = sounding(snum).rhum(mb200);
geotemp = sounding(snum).temp(mb200);

R = 287.75; %dry air constant J/(kgK)
grav = 9.81; %gravity m/s^2

for z = 2:length(presheightvector')
    geoheightvector(z) = (R/grav*(((geotemp(1)+273.15)+(geotemp(z)+273.15))/2)*log(presheightvector(1)/presheightvector(z)))/1000; %%Equation comes from Durre and Yin (2008) http://journals.ametsoc.org/doi/pdf/10.1175/2008BAMS2603.1
end

% Extra quality control to prevent jumps in the graphs
geoheightvector(geoheightvector<-150) = NaN;
geoheightvector(geoheightvector>100) = NaN;
presheightvector(presheightvector<0) = NaN;
sounding(snum).rhum(sounding(snum).rhum<0) = NaN;
sounding(snum).dewpt(sounding(snum).dewpt<-150) = NaN;

% Find cloud base (estimated as first height where RH=100)
[r,~] = find(rhum(rhum==100));
lcl = NaN; %Assume there isn't a cloud
if ~isempty(nonzeros(r))
    lcl = r(1);
end
if isnan(lcl)==1
    LCL(1) = NaN; %Pressure level
    LCL(2) = NaN; %Height
else
    LCL(1) = presheightvector(lcl); %Pressure level
    LCL(2) = geoheightvector(lcl); %Height
end

f92034 = figure(92034); %New figure using a handle that's unlikely to already be in use
g = subplot(1,2,1); %Subplot left
plot(rhum,presheightvector) %RHvP
g2 = subplot(1,2,2); %Subplot right
plot(rhum,geoheightvector) %RHvz
dateString = num2str(sounding(snum).valid_date_num); %Used in title
title(g,['Sounding for ' dateString])
title(g2,['Sounding for ' dateString])
xlabel(g,'Relative Humidity in %')
xlabel(g2,'Relative Humidity in %')
xlim(g,[-2 102])
xlim(g2,[-2 102])
ylabel(g,'Pressure in mb')
ylabel(g2,'Height in km')
set(g,'YDir','reverse');
ylim(g,[200 nanmax(presheightvector)]);
ylim(g2,[0 13]);
set(g2,'yaxislocation','right')
hold off

if trz == 1 %Depending on input, a temperature vs height graph is also constructed
    f92301 = figure(92031); %new figure
    g3 = subplot(1,2,1); %subplot right
    plot(geotemp,geoheightvector,freezingyg,freezingxg,'r') %Tvz
    g4 = subplot(1,2,2);
    plot(rhum,geoheightvector) %RHvz
    dateString = num2str(sounding(snum).valid_date_num);
    title(g3,['Sounding for ' dateString])
    title(g4,['Sounding for ' dateString])
    xlabel(g3,'Temperature (deg C)')
    xlabel(g4,'Relative Humidity (%)')
    ylabel(g3,'Height (km)')
    ylabel(g4,'Height (km)')
    ylim(g3,[0 13]);
    ylim(g4,[0 13]);
    xlim(g4,[-2,102])
    set(g4,'yaxislocation','right')
    hold off
else
    %do nothing
end

end